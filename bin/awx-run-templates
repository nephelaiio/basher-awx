#!/usr/bin/env bash

# global definitions
TRUE=0
FALSE=1
DEBUG=${FALSE}
ERROR=1
SUCCESS=0
PARAMS=$SUCCESS

function check_requirement {
    cmd=$1
    command -v "${cmd}" >/dev/null 2>&1 || {
        echo "${cmd} not found, aborting"
        exit "${ERROR}"
    }
}

function array_contains {
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
        if [[ $element == "$seeking" ]]; then
            in=0
            break
        fi
    done
    return $in
}

function help {
    echo "$0 OPTIONS <template> [ <template> ... ]"
    echo
    echo "OPTIONS:"
    echo "   --host <awx host>"
    echo "   --user <awx user>"
    echo "   --pass <awx pass>"
    echo "  [--inventory <awx inventory>]"
    echo "  [--credential <awx credential> [--credential <awx credential>] ... ]"
    echo "  [--opts <options>]"
    echo "  [--debug]"
}

function debug {
    if [ "${DEBUG}" -eq "${TRUE}" ]; then
        echo "$@"
    fi
}

check_requirement tower-cli
check_requirement jq

# set defaults
AWXCLI_VERBOSE=""
AWXCLI_JOB="tower-cli job launch"
AWXCLI_WF="tower-cli workflow_job launch"
_INVENTORY=""
_CREDENTIAL=""

# parse options (https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            HOST="$2"
            shift # past argument
            shift # past value
            ;;
        --user)
            _USER="$2"
            shift # past argument
            shift # past value
            ;;
        --pass)
            _PASS="$2"
            shift # past argument
            shift # past value
            ;;
        --inventory)
            _INVENTORY="--inventory $2"
            shift # past argument
            shift # past value
            ;;
        --credential)
            _CREDENTIAL="${_CREDENTIAL} --credential $2"
            shift # past argument
            shift # past value
            ;;
        --opts)
            AWXCLI_JOB="${AWXCLI_JOB} $2"
            AWXCLI_WF="${AWXCLI_WF} $2"
            shift # past argument
            shift # past value
            ;;
        --help)
            help
            exit ${SUCCESS}
            ;;
        --debug)
            DEBUG=${TRUE}
            AWXCLI_VERBOSE="--verbose"
            shift # past argument
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# validate options
if [ -z "${HOST}" ]; then
    echo "--host <awx host> option is required"
    PARAMS=${ERROR}
fi
if [ -z "${_USER}" ]; then
    echo "--user <awx api user> option is required"
    PARAMS=${ERROR}
fi
if [ -z "${_PASS}" ]; then
    echo "--pass <awx api password> option is required"
    PARAMS=${ERROR}
fi
if [ "${#POSITIONAL[@]}" -eq 0 ]; then
    echo "at least one template name must be specified"
    exit ${ERROR}
fi

if [ "${PARAMS}" -eq "${ERROR}" ]; then
    echo
    help
    exit ${PARAMS}
fi

tower-cli config host "${HOST}" >/dev/null 2>&1
tower-cli config username "${_USER}" >/dev/null 2>&1
tower-cli config password "${_PASS}" >/dev/null 2>&1
tower-cli config format json >/dev/null 2>&1

# retrieve template
for TPL_NAME in "${POSITIONAL[@]}"; do

    if tower-cli job_template get -n "${TPL_NAME}" >/dev/null 2>&1

    then

        echo "running template ${TPL_NAME}"
        debug "executing command: ${AWXCLI_JOB} -J ${TPL_NAME}"

        if TPL_RUN=$(${AWXCLI_JOB} -J "${TPL_NAME}" "${_INVENTORY}" "${_CREDENTIAL}" --wait ${AWXCLI_VERBOSE})

        then

            echo "ran template ${TPL_NAME}"

        else

            echo "error executing template ${TPL_NAME}"
            echo "${TPL_RUN}"
            exit ${ERROR}

        fi

    elif tower-cli workflow get -n "${TPL_NAME}" >/dev/null 2>&1

    then

        echo "running workflow ${TPL_NAME}"
        debug "executing command: ${AWXCLI_WF} -W ${TPL_NAME}"

        if [[ "_${INVENTORY}" != "" ]]

        then

          echo "[WARN] ignoring invalid argument --inventory for workflow run"

        fi

        if [[ "_${CREDENTIAL}" != "" ]]

        then

          echo "[WARN] ignoring invalid argument --credential for workflow run"

        fi

        if TPL_RUN=$(${AWXCLI_WF} -W "${TPL_NAME}" --wait ${AWXCLI_VERBOSE})

        then

            echo "ran workflow ${TPL_NAME}"

        else

            echo "error executing workflow ${TPL_NAME}"
            echo "${TPL_RUN}"
            exit ${ERROR}

        fi

    else

        echo "could not find template or workflow '${TPL_NAME}'"

    fi

done

exit ${SUCCESS}
