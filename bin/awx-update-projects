#!/usr/bin/env bash

# global definitions
TRUE=0
FALSE=1
DEBUG=${FALSE}
ERROR=1
SUCCESS=0
PARAMS=$SUCCESS

function check_requirement {
  cmd=$1
  command -v "${cmd}" >/dev/null 2>&1 || {
    echo "${cmd} not found, aborting"
    exit $ERROR
  }
}

function help {
  echo "$0 OPTIONS"
  echo
  echo "OPTIONS:"
  echo "   --host <awx host>"
  echo "   --user <awx user>"
  echo "   --pass <awx pass>"
  echo "   --repo <awx project repository url>"
  echo "  [--branch <awx project repository branch>]"
  echo "  [--opts <options>]"
  echo "  [--debug]"
}

function debug {
  if [ ${DEBUG} -eq ${TRUE} ]; then
    echo "$@"
  fi
}

AWXCLI_BIN=tower-cli

check_requirement "${AWXCLI_BIN}"
check_requirement jq

# parse options (https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    --host)
      HOST="$2"
      shift # past argument
      shift # past value
      ;;
    --user)
      _USER="$2"
      shift # past argument
      shift # past value
      ;;
    --pass)
      _PASS="$2"
      shift # past argument
      shift # past value
      ;;
    --repo)
      REPO="$2"
      shift # past argument
      shift # past value
      ;;
    --branch)
      BRANCH="$2"
      shift # past argument
      shift # past value
      ;;
    --opts)
      AWXCLI_BIN="${AWXCLI_BIN} $2"
      shift # past argument
      shift # past value
      ;;
    --help)
      help
      exit ${SUCCESS}
      ;;
    --debug)
      DEBUG="${TRUE}"
      shift # past argument
      ;;
    *)  # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# validate options
if [ -z "${HOST}" ]; then
  echo "--host <awx host> option is required"
  PARAMS="${ERROR}"
fi
if [ -z "${_USER}" ]; then
  echo "--user <awx api user> option is required"
  PARAMS="${ERROR}"
fi
if [ -z "${_PASS}" ]; then
  echo "--pass <awx api password> option is required"
  PARAMS="${ERROR}"
fi
if [ -z "${REPO}" ]; then
  echo "--repo <project reposority url> option is required"
  PARAMS="${ERROR}"
fi
if [ "${PARAMS}" == "${ERROR}" ]; then
  PARAMS="${ERROR}"
fi
if [ -z "${_PASS}" ]; then
  echo "--pass <awx api password> option is required"
  PARAMS="${ERROR}"
fi
if [ "${PARAMS}" == "${ERROR}" ]; then
  PARAMS="${ERROR}"
fi

# set defaults
if [ -z "${BRANCH}" ]; then
  BRANCH="master"
fi

if [ "${PARAMS}" -eq "${ERROR}" ]; then
  echo
  help
  exit ${PARAMS}
fi

tower-cli config format json >/dev/null 2>&1
AWXCLI_GLOBAL_ARGS="-h ${HOST} -u ${_USER} -p ${_PASS} ${AWXCLI_VERBOSE}"

# retrieve awx project ids
cmd="${AWXCLI_BIN} project list --scm-url ${REPO} --scm-branch ${BRANCH} ${AWXCLI_GLOBAL_ARGS}"
debug "executing command: ${cmd}"
if PRJ_JSON=$(eval "${cmd}"); then

  PRJS=$(echo "${PRJ_JSON}" | jq -cr '.results[] | {name,organization}')

  if [ -z "${PRJS}" ]; then

    echo "no projects found for repository ${REPO}"
    exit ${ERROR}

  else

    for PRJ in ${PRJS}; do

      PRJ_NAME=$(echo "$PRJ" | jq -r '.name')
      PRJ_ORG=$(echo "$PRJ" | jq -r '.organization')

      echo -n "updating project ${PRJ_NAME}"
      cmd="${AWXCLI_BIN} project update -n ${PRJ_NAME} --organization ${PRJ_ORG} --wait ${AWXCLI_GLOBAL_ARGS}"
      debug
      debug "executing command: ${cmd}"

      if PRJ_UPDATE=$(eval "${cmd}"); then

        echo " [OK]"

      else

        echo " [ERROR]"
        echo "${PRJ_UPDATE}"
        exit ${ERROR}

      fi

    done

  fi

  exit ${SUCCESS}

else

  echo "unable to query project list from ${HOST}"
  exit ${ERROR}

fi
